FORMAT: 1A

# OpenAPI Specification
**(fka Swagger RESTful API Documentation Specification)**

[![Apiary Documentation](https://img.shields.io/badge/Apiary-Documented-blue.svg)](http://docs.oaispec.apiary.io/#)

#### Version 2.0

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119](http://www.ietf.org/rfc/rfc2119.txt).

The Swagger specification is licensed under [The Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html).

## Introductions

Swaggerâ„¢ is a project used to describe and document RESTful APIs.

The Swagger specification defines a set of files required to describe such an API. These files can then be used by the Swagger-UI project to display the API and Swagger-Codegen to generate clients in various languages. Additional utilities can also take advantage of the resulting files, such as testing tools.

## Revision History

Version | Date | Notes
--- | --- | ---
2.0 | 2014-09-08 | Release of Swagger 2.0
1.2 | 2014-03-14 | Initial release of the formal document.
1.1 | 2012-08-22 | Release of Swagger 1.1
1.0 | 2011-08-10 | First release of the Swagger Specification

## Definitions

##### <a name="pathTemplating"></a>Path Templating
Path templating refers to the usage of curly braces ({}) to mark a section of a URL path as replaceable using path parameters.

##### <a name="mimeTypes"></a>Mime Types
Mime type definitions are spread across several resources. The mime type definitions should be in compliance with [RFC 6838](http://tools.ietf.org/html/rfc6838).

Some examples of possible mime type definitions:
```
  text/plain; charset=utf-8
  application/json
  application/vnd.github+json
  application/vnd.github.v3+json
  application/vnd.github.v3.raw+json
  application/vnd.github.v3.text+json
  application/vnd.github.v3.html+json
  application/vnd.github.v3.full+json
  application/vnd.github.v3.diff
  application/vnd.github.v3.patch
```
##### <a name="httpCodes"></a>HTTP Status Codes
The HTTP Status Codes are used to indicate the status of the executed operation. The available status codes are described by [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) and in the [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).

## Specification

### Format

The files describing the RESTful API in accordance with the Swagger specification are represented as JSON objects and conform to the JSON standards. YAML, being a superset of JSON, can be used as well to
represent a Swagger specification file.

For example, if a field is said to have an array value, the JSON array representation will be used:

```js
{
   "field" : [...]
}
```

While the API is described using JSON it does not impose a JSON input/output to the API itself.

All field names in the specification are **case sensitive**.

The schema exposes two types of fields. Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name. Patterned fields can have multiple occurrences as long as each has a unique name.

### File Structure

The Swagger representation of the API is made of a single file. However, parts of the definitions can be split into separate files, at the discretion of the user. This is applicable for `$ref` fields in the specification as follows from the [JSON Schema](http://json-schema.org) definitions.

By convention, the Swagger specification file is named `swagger.json`.

# Data Structures

# Swagger

This is the root document object for the API specification. It combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.

## Properties

- swagger: `2.0` (string, required, fixed)

    Specifies the Swagger Specification version being used. It can be used by the Swagger UI and other clients to interpret the API listing. The value MUST be `"2.0"`.

- info (Info, required)

    Required. Provides metadata about the API. The metadata can be used by the clients if needed.

- host: `petstore.swagger.io` (string)

    The host (name or ip) serving the API. This MUST be the host only and does not include the scheme nor sub-paths. It MAY include a port. If the host is not included, the host serving the documentation is to be used (including the port). The host does not support path templating.

- basePath: `/api` (string)

    The base path on which the API is served, which is relative to the host. If it is not included, the API is served directly under the host. The value MUST start with a leading slash (/). The basePath does not support path templating.

- schemes: `http` (array[string])

    The transfer protocol of the API. Values MUST be from the list: "http", "https", "ws", "wss". If the schemes is not included, the default scheme to be used is the one used to access the Swagger definition itself.

- consumes: `application/json` (array[string])

    A list of MIME types the APIs can consume. This is global to all APIs but can be overridden on specific API calls. Value MUST be as described under Mime Types.

- produces: `application/json` (array[string])

    A list of MIME types the APIs can produce. This is global to all APIs but can be overridden on specific API calls. Value MUST be as described under Mime Types.

- paths (Paths, required)

    The available paths and operations for the API.

- definitions (Definitions)

    An object to hold data types produced and consumed by operations.

- parameters (Parameters Definitions)

    An object to hold parameters that can be used across operations. This property does not define global parameters for all operations.

- responses (Responses Definitions)

    An object to hold responses that can be used across operations. This property does not define global responses for all operations.

- securityDefinitions (Security Definitions)

    Security scheme definitions that can be used across the specification.

- security (array[Security Requirement])

    A declaration of which security schemes are applied for the API as a whole. The list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements). Individual operations can override this definition.

- tags (array[Tag])

    A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared may be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.

- externalDocs (External Documentation)

    Additional external documentation.

# Info

The object provides metadata about the API. The metadata can be used by the clients if needed, and can be presented in the Swagger-UI for convenience.

## Properties

- version: `1.0.0` (string, required)

    Provides the version of the application API (not to be confused with the specification version).

- title: `Swagger Petstore` (string, required)

    The title of the application.

- description: `A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification` (string)

    A short description of the application. [GFM syntax](https://help.github.com/articles/github-flavored-markdown) can be used for rich text representation.

- termsOfService: `http://swagger.io/terms/` (string)

    The Terms of Service for the API.

- contact (object) - The contact information for the exposed API.
  - name: `Swagger API Team` (string) - The identifying name of the contact person/organization.
  - email: `foo@example.com` (string) - The URL pointing to the contact information. MUST be in the format of a URL.
  - url: `http://madskristensen.net` - The email address of the contact person/organization. MUST be in the format of an email address.

- license (object) - The license information for the exposed API.
  - name: `MIT` (string, required) - The license name used for the API.
  - url: `http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT` (string) - A URL to the license used for the API. MUST be in the format of a URL.

# Paths
TODO

# Definitions
TODO

# Parameters Definitions
TODO

# Responses Definitions
TODO

# Security Definitions
TODO

# Security Requirement
TODO

# Tag
TODO

# External Documentation
TODO

# integer (number)
Signed 32 bits.

# long (number)
Signed 64 bits.

# float (number)

# doulbe (number)

# byte (string)
Base64 encoded characters.

# binary (string)
Any sequence of octets.

# date (string)
As defined by `full-date` - [RFC3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14)

# dateTime (string)
As defined by `date-time` - [RFC3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14)

# password (string)
Used to hint UIs the input needs to be obscured.

# Group Swagger
This group is artifically created in order to invoke rendering of Objects and examples at Apiary.

## Swagger Document [/swagger]
- Attributes (Swagger)

### Retrieve [GET]
- Response 200 (application/json)
    - Attributes (Swagger)
